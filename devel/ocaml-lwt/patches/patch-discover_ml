$OpenBSD$
--- discover.ml.orig	Thu Jul 19 13:35:56 2012
+++ discover.ml	Fri Aug 17 16:19:08 2012
@@ -114,15 +114,17 @@ CAMLprim value lwt_test()
 }
 "
 
-let get_credentials_code = "
+let get_credentials_code struct_name = "
 #include <caml/mlvalues.h>
 #include <sys/types.h>
 #include <sys/socket.h>
 
 CAMLprim value lwt_test()
 {
-    getsockopt(0, SOL_SOCKET, SO_PEERCRED, 0, 0);
-    return Val_unit;
+  struct " ^ struct_name ^ " cred;
+  socklen_t cred_len = sizeof(cred);
+  getsockopt(0, SOL_SOCKET, SO_PEERCRED, &cred, &cred_len);
+  return Val_unit;
 }
 "
 
@@ -461,7 +463,10 @@ Lwt can use pthread or the win32 API.
   test_feature ~do_check "fd passing" "HAVE_FD_PASSING" (fun () -> test_code ([], []) fd_passing_code);
   test_feature ~do_check "sched_getcpu" "HAVE_GETCPU" (fun () -> test_code ([], []) getcpu_code);
   test_feature ~do_check "affinity getting/setting" "HAVE_AFFINITY" (fun () -> test_code ([], []) affinity_code);
-  test_feature ~do_check "credentials getting (getsockopt)" "HAVE_GET_CREDENTIALS" (fun () -> test_code ([], []) get_credentials_code);
+  test_feature ~do_check "credentials getting (Linux)" "HAVE_GET_CREDENTIALS_LINUX" (fun () -> test_code ([], []) (get_credentials_code "ucred"));
+  test_feature ~do_check "credentials getting (NetBSD)" "HAVE_GET_CREDENTIALS_NETBSD" (fun () -> test_code ([], []) (get_credentials_code "sockcred"));
+  test_feature ~do_check "credentials getting (OpenBSD)" "HAVE_GET_CREDENTIALS_OPENBSD" (fun () -> test_code ([], []) (get_credentials_code "sockpeercred"));
+  test_feature ~do_check "credentials getting (FreeBSD)" "HAVE_GET_CREDENTIALS_FREEBSD" (fun () -> test_code ([], []) (get_credentials_code "cmsgcred"));
   test_feature ~do_check "credentials getting (getpeereid)" "HAVE_GETPEEREID" (fun () -> test_code ([], []) get_peereid_code);
   test_feature ~do_check "fdatasync" "HAVE_FDATASYNC" (fun () -> test_code ([], []) fdatasync_code);
   test_feature ~do_check "netdb_reentrant" "HAVE_NETDB_REENTRANT" (fun () -> test_code ([], []) netdb_reentrant_code);
